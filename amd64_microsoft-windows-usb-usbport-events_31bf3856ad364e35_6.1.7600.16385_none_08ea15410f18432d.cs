using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsUSBUSBPORT;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class MicrosoftWindowsUSBUSBPORTTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Microsoft-Windows-USB-USBPORT";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0xc88a4ef5), unchecked((short) 0xd048), unchecked((short) 0x4013), 0x94, 0x08, 0xe0, 0x4b, 0x7d, 0xb2, 0x81, 0x4a);
        public enum Keywords : long
        {
            Diagnostic = 0x1,
            Powerdiagnostics = 0x2,
        };

        public MicrosoftWindowsUSBUSBPORTTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_DEVICE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_CREATE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_DEVICE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_INFORMATION.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 15, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_DEVICE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_INITIALIZE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 13, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_DEVICE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_REMOVAL.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 14, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_DEVICE_IDLE_STATE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_CLEAR.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 17, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_DEVICE_IDLE_STATE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_SET.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 16, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_CLOSE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 19, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_INFORMATION.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 20, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_OPENmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_OPEN.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_OPENmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 18, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_ADDmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_ADD.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_ADDmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_INFORMATION.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_REMOVAL.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_RESUMEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_RESUME.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_RESUMEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STARTmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_START.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STARTmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STOPmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_STOP.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STOPmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_SUSPENDmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_SUSPEND.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_SUSPENDmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISABLE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_ENABLE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1036, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2060Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)2060
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2060Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2060, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3083Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)3083
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3083Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3083, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1037, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1038Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)1038
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1038Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1038, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1039Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)1039
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1039Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1039, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1040Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)1040
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1040Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1040, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1041Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)1041
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1041Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1041, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1042Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)1042
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1042Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1042, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2061Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)2061
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2061Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2061, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2062Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)2062
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2062Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2062, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2063Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)2063
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2063Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2063, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2064Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)2064
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2064Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2064, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2065Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)2065
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2065Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2065, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3084Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)3084
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3084Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3084, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3085Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)3085
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3085Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3085, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3086Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)3086
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3086Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3086, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3087Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)3087
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3087Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3087, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3088Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)3088
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3088Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3088, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1035, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2059Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)2059
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2059Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2059, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3082Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_RESUME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)3082
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3082Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3082, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1025, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2049Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)2049
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2049Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2049, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3073Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)3073
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3073Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3073, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1026, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1027Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)1027
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1027Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1027, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1028Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)1028
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1028Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1028, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1029Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)1029
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1029Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1029, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1030Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)1030
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1030Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1030, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2050Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)2050
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2050Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2050, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2051Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)2051
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2051Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2051, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2052Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)2052
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2052Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2052, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2053Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)2053
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2053Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2053, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2054Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)2054
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2054Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2054, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3074Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)3074
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3074Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3074, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3075Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)3075
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3075Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3075, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3076Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)3076
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3076Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3076, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3077Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_ERROR.message)3077
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3077Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3077, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1024, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2048Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)2048
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2048Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2048, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3072Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_START.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)3072
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3072Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3072, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_STOP.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1032, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2056Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_STOP.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)2056
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2056Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2056, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3079Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_STOP.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)3079
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3079Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3079, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_STOP.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1031, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2055Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_STOP.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)2055
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2055Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2055, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3078Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_STOP.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)3078
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3078Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3078, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPEND.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1034, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2058Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPEND.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)2058
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2058Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2058, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3081Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPEND.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)3081
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3081Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3081, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPEND.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1033, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2057Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPEND.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)2057
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2057Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2057, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3080Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPEND.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)3080
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3080Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3080, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISABLE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_ENABLE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_IRPmessagestringUSBPORT_ETW_PROVIDERopcodeop_CANCELmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_IRP.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_CANCEL.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_IRPmessagestringUSBPORT_ETW_PROVIDERopcodeop_CANCELmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 102, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_MDL_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_ALLOCATE_MDL_FAILURE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_MDL_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 96, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_TRANSFER_CONTEXT_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_ALLOCATE_TRANSFER_CONTEXT_FAILURE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_TRANSFER_CONTEXT_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 97, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_ABORT_PIPE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 77, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_ABORT_PIPE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 54, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 70, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_DATA.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 71, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 26, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CLASS_DEVICE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 49, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CLASS_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 51, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CLASS_INTERFACE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 50, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CLASS_OTHER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 52, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 37, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 39, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 38, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_OTHER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 40, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CONTROL_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 66, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CONTROL_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_DATA.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 68, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNALmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CONTROL_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_INTERNAL.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNALmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 75, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNAL_DATAmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CONTROL_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_INTERNAL_DATA.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNAL_DATAmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 76, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CONTROL_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 24, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_INTERNALmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CONTROL_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH_INTERNAL.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_INTERNALmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 74, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EX.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 67, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EX.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_DATA.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 69, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EX.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 25, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_CONFIGURATION.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 58, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CURRENT_FRAME_NUMBERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_CURRENT_FRAME_NUMBER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CURRENT_FRAME_NUMBERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 23, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 28, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 30, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 32, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_FRAME_LENGTH.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_FRAME_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 63, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_INTERFACE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 59, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTORmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTOR.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTORmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 60, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_STATUS_FROM_DEVICE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 42, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_STATUS_FROM_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 44, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_STATUS_FROM_INTERFACE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 43, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_GET_STATUS_FROM_OTHER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 45, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_ISOCH_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 72, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_ISOCH_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_DATA.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 73, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_ISOCH_TRANSFER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 27, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROL.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 62, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_RESERVED.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_RESERVEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 65, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SELECT_CONFIGURATION.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 21, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SELECT_INTERFACE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 22, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 29, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 31, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 33, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SET_FEATURE_TO_DEVICE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 34, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SET_FEATURE_TO_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 36, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SET_FEATURE_TO_INTERFACE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 35, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SET_FEATURE_TO_OTHER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 41, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SET_FRAME_LENGTH.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FRAME_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 64, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SYNC_CLEAR_STALL.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 57, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SYNC_RESET_PIPE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 56, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALL.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 55, ProviderGuid);
            }
        }
        public event Action<EmptyTraceData> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROL.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 61, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_VENDOR_DEVICE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 46, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_VENDOR_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 48, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_VENDOR_INTERFACE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 47, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_FUNCTION_VENDOR_OTHER.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 53, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTH.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 92, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 91, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTH.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 90, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_CONTROL_TRANSFER_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 89, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DEVICE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_DEVICE_HANDLE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DEVICE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 81, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DUE_TO_HC_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_DUE_TO_HC_SUSPEND.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DUE_TO_HC_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 84, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_FUNCTION.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 79, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_NOT_SUPPORTEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_FUNCTION_NOT_SUPPORTED.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_NOT_SUPPORTEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 82, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_RESERVEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_FUNCTION_RESERVED.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_RESERVEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 83, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_HEADER_LENGTH.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 80, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTH_WARNINGmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_HEADER_LENGTH_WARNING.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTH_WARNINGmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 78, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_NUM_PACKETSmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_ISOCHRONOUS_NUM_PACKETS.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_NUM_PACKETSmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 100, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_START_FRAMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_ISOCHRONOUS_START_FRAME.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_START_FRAMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 101, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 93, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_ZERO_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_ISOCHRONOUS_ZERO_LENGTH.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_ZERO_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 99, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDL.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 95, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDL.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 94, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_PIPE_HANDLE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 86, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_URB_LINKmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_URB_LINK.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_URB_LINKmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 85, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ZERO_BW_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_INVALID_ZERO_BW_PIPE_HANDLE.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ZERO_BW_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 87, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUEST.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 98, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUEST.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 88, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_USBUSER_OP_RAW_RESET_PORT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 107, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_USBUSER_OP_RAW_RESET_PORT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 103, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_USBUSER_OP_RAW_RESET_PORT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_STATUS.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 104, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage105Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_USBUSER_OP_RAW_RESET_PORT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_STATUS.message)105
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage105Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 105, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage106Args> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_USBUSER_OP_RAW_RESET_PORT.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_STATUS.message)106
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage106Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 106, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_USBUSER_OP_SEND_ONE_PACKET.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 111, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_USBUSER_OP_SEND_ONE_PACKET.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_COMPLETE_DATA.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 112, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_USBUSER_OP_SEND_ONE_PACKET.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 108, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_DATAmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_USBUSER_OP_SEND_ONE_PACKET.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_DISPATCH_DATA.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_DATAmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 109, ProviderGuid);
            }
        }
        public event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageArgs> $(string.USBPORT_ETW_PROVIDER.task.task_USBPORT_USBUSER_OP_SEND_ONE_PACKET.message)$(string.USBPORT_ETW_PROVIDER.opcode.op_STATUS.message)
        {
            add
            {
                source.RegisterEventTemplate(stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 110, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageArgs(action, 12, 4, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessage", Guid.Empty, 11, "stringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs(action, 15, 4, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessage", Guid.Empty, 14, "stringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageArgs(action, 13, 4, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessage", Guid.Empty, 12, "stringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs(action, 14, 4, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessage", Guid.Empty, 13, "stringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageArgs(action, 17, 5, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessage", Guid.Empty, 22, "stringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageArgs(action, 16, 5, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessage", Guid.Empty, 21, "stringUSBPORT_ETW_PROVIDERopcodeop_SETmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessageArgs(action, 19, 6, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessage", Guid.Empty, 24, "stringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs(action, 20, 6, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessage", Guid.Empty, 14, "stringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_OPENmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_OPENmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_OPENmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_OPENmessageArgs(action, 18, 6, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessage", Guid.Empty, 23, "stringUSBPORT_ETW_PROVIDERopcodeop_OPENmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_ADDmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_ADDmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_ADDmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_ADDmessageArgs(action, 1, 1, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessage", Guid.Empty, 10, "stringUSBPORT_ETW_PROVIDERopcodeop_ADDmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs(action, 3, 1, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessage", Guid.Empty, 14, "stringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs(action, 2, 1, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessage", Guid.Empty, 13, "stringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_RESUMEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_RESUMEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_RESUMEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_RESUMEmessageArgs(action, 7, 1, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessage", Guid.Empty, 18, "stringUSBPORT_ETW_PROVIDERopcodeop_RESUMEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STARTmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STARTmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STARTmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STARTmessageArgs(action, 4, 1, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessage", Guid.Empty, 15, "stringUSBPORT_ETW_PROVIDERopcodeop_STARTmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STOPmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STOPmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STOPmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STOPmessageArgs(action, 5, 1, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessage", Guid.Empty, 16, "stringUSBPORT_ETW_PROVIDERopcodeop_STOPmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_SUSPENDmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_SUSPENDmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_SUSPENDmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_SUSPENDmessageArgs(action, 6, 1, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessage", Guid.Empty, 17, "stringUSBPORT_ETW_PROVIDERopcodeop_SUSPENDmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageArgs(action, 9, 2, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessage", Guid.Empty, 20, "stringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageArgs(action, 8, 2, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessage", Guid.Empty, 19, "stringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs(action, 1036, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2060Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2060Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2060Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2060Args(action, 2060, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3083Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3083Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3083Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3083Args(action, 3083, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageArgs(action, 1037, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1038Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1038Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1038Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1038Args(action, 1038, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1039Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1039Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1039Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1039Args(action, 1039, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1040Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1040Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1040Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1040Args(action, 1040, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1041Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1041Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1041Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1041Args(action, 1041, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1042Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1042Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1042Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1042Args(action, 1042, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2061Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2061Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2061Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2061Args(action, 2061, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2062Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2062Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2062Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2062Args(action, 2062, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2063Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2063Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2063Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2063Args(action, 2063, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2064Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2064Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2064Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2064Args(action, 2064, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2065Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2065Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2065Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2065Args(action, 2065, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3084Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3084Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3084Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3084Args(action, 3084, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3085Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3085Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3085Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3085Args(action, 3085, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3086Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3086Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3086Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3086Args(action, 3086, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3087Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3087Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3087Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3087Args(action, 3087, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3088Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3088Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3088Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3088Args(action, 3088, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 1035, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2059Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2059Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2059Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2059Args(action, 2059, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3082Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3082Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3082Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3082Args(action, 3082, 82, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs(action, 1025, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2049Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2049Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2049Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2049Args(action, 2049, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3073Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3073Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3073Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3073Args(action, 3073, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageArgs(action, 1026, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1027Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1027Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1027Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1027Args(action, 1027, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1028Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1028Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1028Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1028Args(action, 1028, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1029Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1029Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1029Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1029Args(action, 1029, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1030Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1030Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1030Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage1030Args(action, 1030, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2050Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2050Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2050Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2050Args(action, 2050, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2051Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2051Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2051Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2051Args(action, 2051, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2052Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2052Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2052Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2052Args(action, 2052, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2053Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2053Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2053Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2053Args(action, 2053, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2054Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2054Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2054Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage2054Args(action, 2054, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3074Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3074Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3074Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3074Args(action, 3074, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3075Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3075Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3075Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3075Args(action, 3075, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3076Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3076Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3076Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3076Args(action, 3076, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3077Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3077Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3077Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage3077Args(action, 3077, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 34, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 1024, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2048Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2048Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2048Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2048Args(action, 2048, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3072Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3072Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3072Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3072Args(action, 3072, 79, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs(action, 1032, 80, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2056Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2056Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2056Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2056Args(action, 2056, 80, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3079Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3079Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3079Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3079Args(action, 3079, 80, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 1031, 80, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2055Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2055Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2055Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2055Args(action, 2055, 80, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3078Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3078Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3078Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3078Args(action, 3078, 80, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs(action, 1034, 81, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2058Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2058Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2058Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage2058Args(action, 2058, 81, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3081Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3081Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3081Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage3081Args(action, 3081, 81, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 1033, 81, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2057Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2057Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2057Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage2057Args(action, 2057, 81, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3080Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3080Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3080Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage3080Args(action, 3080, 81, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageArgs(action, 11, 3, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessage", Guid.Empty, 20, "stringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageArgs(action, 10, 3, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessage", Guid.Empty, 19, "stringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_IRPmessagestringUSBPORT_ETW_PROVIDERopcodeop_CANCELmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_IRPmessagestringUSBPORT_ETW_PROVIDERopcodeop_CANCELmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_IRPmessagestringUSBPORT_ETW_PROVIDERopcodeop_CANCELmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_IRPmessagestringUSBPORT_ETW_PROVIDERopcodeop_CANCELmessageArgs(action, 102, 76, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_IRPmessage", Guid.Empty, 31, "stringUSBPORT_ETW_PROVIDERopcodeop_CANCELmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_MDL_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_MDL_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_MDL_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_MDL_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 96, 70, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_MDL_FAILUREmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_TRANSFER_CONTEXT_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_TRANSFER_CONTEXT_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_TRANSFER_CONTEXT_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_TRANSFER_CONTEXT_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 97, 71, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_TRANSFER_CONTEXT_FAILUREmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs(action, 77, 40, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 54, 40, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs(action, 70, 12, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs(action, 71, 12, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessage", Guid.Empty, 27, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 26, 12, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 49, 35, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_DEVICEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 51, 37, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_ENDPOINTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 50, 36, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_INTERFACEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 52, 38, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_OTHERmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 37, 23, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 39, 25, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 38, 24, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 40, 26, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_OTHERmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs(action, 66, 10, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs(action, 68, 10, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessage", Guid.Empty, 27, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNALmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNALmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNALmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNALmessageArgs(action, 75, 10, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessage", Guid.Empty, 29, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNALmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNAL_DATAmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNAL_DATAmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNAL_DATAmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNAL_DATAmessageArgs(action, 76, 10, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessage", Guid.Empty, 30, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNAL_DATAmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 24, 10, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_INTERNALmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_INTERNALmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_INTERNALmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_INTERNALmessageArgs(action, 74, 10, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessage", Guid.Empty, 28, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_INTERNALmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs(action, 67, 11, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs(action, 69, 11, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessage", Guid.Empty, 27, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 25, 11, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 58, 44, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CONFIGURATIONmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CURRENT_FRAME_NUMBERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CURRENT_FRAME_NUMBERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CURRENT_FRAME_NUMBERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CURRENT_FRAME_NUMBERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 23, 9, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CURRENT_FRAME_NUMBERmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 28, 14, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 30, 16, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 32, 18, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_FRAME_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 63, 49, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_FRAME_LENGTHmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 59, 45, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_INTERFACEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTORmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTORmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTORmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTORmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 60, 46, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTORmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 42, 28, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_DEVICEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 44, 30, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_ENDPOINTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 43, 29, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_INTERFACEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 45, 31, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_OTHERmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs(action, 72, 13, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs(action, 73, 13, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessage", Guid.Empty, 27, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 27, 13, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 62, 48, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROLmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_RESERVEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 65, 51, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_RESERVEDmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 21, 7, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_CONFIGURATIONmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 22, 8, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_INTERFACEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 29, 15, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 31, 17, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 33, 19, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 34, 20, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_DEVICEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 36, 22, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_ENDPOINTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 35, 21, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_INTERFACEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 41, 27, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_OTHERmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FRAME_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 64, 50, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FRAME_LENGTHmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 57, 43, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_CLEAR_STALLmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 56, 42, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 55, 41, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALLmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private EmptyTraceData stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<EmptyTraceData> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EmptyTraceData(action, 61, 47, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROLmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 46, 32, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_DEVICEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 48, 34, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_ENDPOINTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 47, 33, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_INTERFACEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 53, 39, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_OTHERmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 92, 66, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTHmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 91, 65, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 90, 64, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTHmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 89, 63, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_ENDPOINTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DEVICE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DEVICE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DEVICE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DEVICE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 81, 55, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DEVICE_HANDLEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DUE_TO_HC_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DUE_TO_HC_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DUE_TO_HC_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DUE_TO_HC_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 84, 58, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DUE_TO_HC_SUSPENDmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 79, 53, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTIONmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_NOT_SUPPORTEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_NOT_SUPPORTEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_NOT_SUPPORTEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_NOT_SUPPORTEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 82, 56, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_NOT_SUPPORTEDmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_RESERVEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_RESERVEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_RESERVEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_RESERVEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 83, 57, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_RESERVEDmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 80, 54, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTHmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTH_WARNINGmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTH_WARNINGmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTH_WARNINGmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTH_WARNINGmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 78, 52, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTH_WARNINGmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_NUM_PACKETSmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_NUM_PACKETSmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_NUM_PACKETSmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_NUM_PACKETSmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 100, 74, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_NUM_PACKETSmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_START_FRAMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_START_FRAMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_START_FRAMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_START_FRAMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 101, 75, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_START_FRAMEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 93, 67, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_ZERO_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_ZERO_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_ZERO_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_ZERO_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 99, 73, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_ZERO_LENGTHmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 95, 69, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDLmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 94, 68, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDLmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 86, 60, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_PIPE_HANDLEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_URB_LINKmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_URB_LINKmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_URB_LINKmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_URB_LINKmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 85, 59, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_URB_LINKmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ZERO_BW_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ZERO_BW_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ZERO_BW_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ZERO_BW_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 87, 61, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ZERO_BW_PIPE_HANDLEmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 98, 72, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUESTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 88, 62, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUESTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs(action, 107, 77, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 103, 77, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageArgs(action, 104, 77, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessage", Guid.Empty, 33, "stringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage105Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage105Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage105Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage105Args(action, 105, 77, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessage", Guid.Empty, 33, "stringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage106Args stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage106Template(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage106Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage106Args(action, 106, 77, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessage", Guid.Empty, 33, "stringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageArgs(action, 111, 78, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessage", Guid.Empty, 26, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageArgs(action, 112, 78, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessage", Guid.Empty, 27, "stringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageArgs(action, 108, 78, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessage", Guid.Empty, 25, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_DATAmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_DATAmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_DATAmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_DATAmessageArgs(action, 109, 78, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessage", Guid.Empty, 32, "stringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_DATAmessage", ProviderGuid, ProviderName );
        }
        static private stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageArgs stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageTemplate(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageArgs(action, 110, 78, "stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessage", Guid.Empty, 33, "stringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessage", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[166];
                templates[0] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_ADDmessageTemplate(null);
                templates[1] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageTemplate(null);
                templates[2] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageTemplate(null);
                templates[3] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STARTmessageTemplate(null);
                templates[4] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_STOPmessageTemplate(null);
                templates[5] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_SUSPENDmessageTemplate(null);
                templates[6] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLERmessagestringUSBPORT_ETW_PROVIDERopcodeop_RESUMEmessageTemplate(null);
                templates[7] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageTemplate(null);
                templates[8] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_ASYNC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageTemplate(null);
                templates[9] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_ENABLEmessageTemplate(null);
                templates[10] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_PERIODIC_SCHEDULEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISABLEmessageTemplate(null);
                templates[11] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageTemplate(null);
                templates[12] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageTemplate(null);
                templates[13] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageTemplate(null);
                templates[14] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageTemplate(null);
                templates[15] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageTemplate(null);
                templates[16] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageTemplate(null);
                templates[17] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_OPENmessageTemplate(null);
                templates[18] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessageTemplate(null);
                templates[19] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageTemplate(null);
                templates[20] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[21] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SELECT_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[22] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CURRENT_FRAME_NUMBERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[23] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[24] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[25] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[26] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[27] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[28] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[29] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[30] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[31] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[32] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[33] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[34] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[35] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[36] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[37] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[38] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[39] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLEAR_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[40] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FEATURE_TO_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[41] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[42] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[43] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[44] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_STATUS_FROM_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[45] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[46] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[47] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[48] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[49] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[50] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[51] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CLASS_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[52] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_VENDOR_OTHERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[53] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[54] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[55] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_RESET_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[56] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SYNC_CLEAR_STALLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[57] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_CONFIGURATIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[58] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_INTERFACEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[59] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_MS_FEATURE_DESCRIPTORmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[60] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[61] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[62] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_GET_FRAME_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[63] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_SET_FRAME_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[64] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_RESERVEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[65] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[66] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[67] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(null);
                templates[68] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFER_EXmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(null);
                templates[69] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[70] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(null);
                templates[71] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[72] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ISOCH_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(null);
                templates[73] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_INTERNALmessageTemplate(null);
                templates[74] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNALmessageTemplate(null);
                templates[75] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_CONTROL_TRANSFERmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_INTERNAL_DATAmessageTemplate(null);
                templates[76] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_FUNCTION_ABORT_PIPEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[77] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTH_WARNINGmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[78] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTIONmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[79] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_HEADER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[80] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DEVICE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[81] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_NOT_SUPPORTEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[82] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_FUNCTION_RESERVEDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[83] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_DUE_TO_HC_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[84] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_URB_LINKmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[85] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[86] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ZERO_BW_PIPE_HANDLEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[87] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ZERO_BW_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[88] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[89] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_CONTROL_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[90] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[91] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_BULK_OR_INTERRUPT_TRANSFER_BUFFER_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[92] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_TRANSFER_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[93] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NULL_TRANSFER_BUFFER_AND_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[94] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_NON_NULL_TRANSFER_BUFFER_MDLmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[95] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_MDL_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[96] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_ALLOCATE_TRANSFER_CONTEXT_FAILUREmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[97] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_NOP_ROOTHUB_PIPE_HANDLE_REQUESTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[98] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_ZERO_LENGTHmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[99] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_NUM_PACKETSmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[100] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_URB_INVALID_ISOCHRONOUS_START_FRAMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[101] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_IRPmessagestringUSBPORT_ETW_PROVIDERopcodeop_CANCELmessageTemplate(null);
                templates[102] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[103] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageTemplate(null);
                templates[104] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageTemplate(null);
                templates[105] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageTemplate(null);
                templates[106] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_RAW_RESET_PORTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[107] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[108] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCH_DATAmessageTemplate(null);
                templates[109] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_STATUSmessageTemplate(null);
                templates[110] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[111] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_USBUSER_OP_SEND_ONE_PACKETmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_DATAmessageTemplate(null);
                templates[112] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[113] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[114] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[115] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[116] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[117] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[118] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[119] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[120] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[121] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[122] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[123] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[124] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[125] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[126] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[127] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[128] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[129] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[130] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[131] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[132] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[133] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[134] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[135] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[136] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[137] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[138] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[139] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[140] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[141] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[142] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[143] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[144] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[145] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[146] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[147] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[148] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[149] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[150] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[151] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[152] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[153] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[154] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STARTmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[155] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[156] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_STOPmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[157] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[158] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_SUSPENDmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[159] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_DISPATCHmessageTemplate(null);
                templates[160] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETEmessageTemplate(null);
                templates[161] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[162] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[163] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[164] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                templates[165] = stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_HOST_CONTROLLER_MINIPORT_RESUMEmessagestringUSBPORT_ETW_PROVIDERopcodeop_COMPLETE_ERRORmessageTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsUSBUSBPORT
{
    public sealed class stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageArgs : TraceEvent
    {
        public Address DeviceObject { get { return GetAddressAt(0); } }
        public int PciBus { get { return GetInt32At(HostOffset(4, 1)); } }
        public int PciDevice { get { return GetInt16At(HostOffset(8, 1)); } }
        public int PciFunction { get { return GetInt16At(HostOffset(10, 1)); } }
        public int PciVendorId { get { return GetInt16At(HostOffset(12, 1)); } }
        public int PciDeviceId { get { return GetInt16At(HostOffset(14, 1)); } }
        public Address DeviceHandle { get { return GetAddressAt(HostOffset(16, 1)); } }
        public int idVendor { get { return GetInt16At(HostOffset(20, 2)); } }
        public int idProduct { get { return GetInt16At(HostOffset(22, 2)); } }
        public int PortPathDepth { get { return GetInt32At(HostOffset(24, 2)); } }
        public int PortPath { get { return GetInt32At(HostOffset(28, 2)); } }
        public int DeviceSpeed { get { return GetInt32At(HostOffset(52, 2)); } }
        public int DeviceAddress { get { return GetInt32At(HostOffset(56, 2)); } }
        public int fid_bLength { get { return GetByteAt(HostOffset(60, 2)); } }
        public int fid_bDescriptorType { get { return GetByteAt(HostOffset(61, 2)); } }
        public int fid_bcdUSB { get { return GetInt16At(HostOffset(62, 2)); } }
        public int fid_bDeviceClass { get { return GetByteAt(HostOffset(64, 2)); } }
        public int fid_bDeviceSubClass { get { return GetByteAt(HostOffset(65, 2)); } }
        public int fid_bDeviceProtocol { get { return GetByteAt(HostOffset(66, 2)); } }
        public int fid_bMaxPacketSize0 { get { return GetByteAt(HostOffset(67, 2)); } }
        public int fid_idVendor { get { return GetInt16At(HostOffset(68, 2)); } }
        public int fid_idProduct { get { return GetInt16At(HostOffset(70, 2)); } }
        public int fid_bcdDevice { get { return GetInt16At(HostOffset(72, 2)); } }
        public int fid_iManufacturer { get { return GetByteAt(HostOffset(74, 2)); } }
        public int fid_iProduct { get { return GetByteAt(HostOffset(75, 2)); } }
        public int fid_iSerialNumber { get { return GetByteAt(HostOffset(76, 2)); } }
        public int fid_bNumConfigurations { get { return GetByteAt(HostOffset(77, 2)); } }

        #region Private
        internal stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageArgs(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(78, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(78, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "DeviceObject", DeviceObject);
             XmlAttrib(sb, "PciBus", PciBus);
             XmlAttrib(sb, "PciDevice", PciDevice);
             XmlAttrib(sb, "PciFunction", PciFunction);
             XmlAttrib(sb, "PciVendorId", PciVendorId);
             XmlAttrib(sb, "PciDeviceId", PciDeviceId);
             XmlAttribHex(sb, "DeviceHandle", DeviceHandle);
             XmlAttrib(sb, "idVendor", idVendor);
             XmlAttrib(sb, "idProduct", idProduct);
             XmlAttrib(sb, "PortPathDepth", PortPathDepth);
             XmlAttrib(sb, "PortPath", PortPath);
             XmlAttrib(sb, "DeviceSpeed", DeviceSpeed);
             XmlAttrib(sb, "DeviceAddress", DeviceAddress);
             XmlAttrib(sb, "fid_bLength", fid_bLength);
             XmlAttrib(sb, "fid_bDescriptorType", fid_bDescriptorType);
             XmlAttrib(sb, "fid_bcdUSB", fid_bcdUSB);
             XmlAttrib(sb, "fid_bDeviceClass", fid_bDeviceClass);
             XmlAttrib(sb, "fid_bDeviceSubClass", fid_bDeviceSubClass);
             XmlAttrib(sb, "fid_bDeviceProtocol", fid_bDeviceProtocol);
             XmlAttrib(sb, "fid_bMaxPacketSize0", fid_bMaxPacketSize0);
             XmlAttrib(sb, "fid_idVendor", fid_idVendor);
             XmlAttrib(sb, "fid_idProduct", fid_idProduct);
             XmlAttrib(sb, "fid_bcdDevice", fid_bcdDevice);
             XmlAttrib(sb, "fid_iManufacturer", fid_iManufacturer);
             XmlAttrib(sb, "fid_iProduct", fid_iProduct);
             XmlAttrib(sb, "fid_iSerialNumber", fid_iSerialNumber);
             XmlAttrib(sb, "fid_bNumConfigurations", fid_bNumConfigurations);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DeviceObject", "PciBus", "PciDevice", "PciFunction", "PciVendorId", "PciDeviceId", "DeviceHandle", "idVendor", "idProduct", "PortPathDepth", "PortPath", "DeviceSpeed", "DeviceAddress", "fid_bLength", "fid_bDescriptorType", "fid_bcdUSB", "fid_bDeviceClass", "fid_bDeviceSubClass", "fid_bDeviceProtocol", "fid_bMaxPacketSize0", "fid_idVendor", "fid_idProduct", "fid_bcdDevice", "fid_iManufacturer", "fid_iProduct", "fid_iSerialNumber", "fid_bNumConfigurations"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DeviceObject;
                case 1:
                    return PciBus;
                case 2:
                    return PciDevice;
                case 3:
                    return PciFunction;
                case 4:
                    return PciVendorId;
                case 5:
                    return PciDeviceId;
                case 6:
                    return DeviceHandle;
                case 7:
                    return idVendor;
                case 8:
                    return idProduct;
                case 9:
                    return PortPathDepth;
                case 10:
                    return PortPath;
                case 11:
                    return DeviceSpeed;
                case 12:
                    return DeviceAddress;
                case 13:
                    return fid_bLength;
                case 14:
                    return fid_bDescriptorType;
                case 15:
                    return fid_bcdUSB;
                case 16:
                    return fid_bDeviceClass;
                case 17:
                    return fid_bDeviceSubClass;
                case 18:
                    return fid_bDeviceProtocol;
                case 19:
                    return fid_bMaxPacketSize0;
                case 20:
                    return fid_idVendor;
                case 21:
                    return fid_idProduct;
                case 22:
                    return fid_bcdDevice;
                case 23:
                    return fid_iManufacturer;
                case 24:
                    return fid_iProduct;
                case 25:
                    return fid_iSerialNumber;
                case 26:
                    return fid_bNumConfigurations;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CREATEmessageArgs> m_target;
        #endregion
    }
    public sealed class stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs : TraceEvent
    {
        public Address DeviceObject { get { return GetAddressAt(0); } }
        public int PciBus { get { return GetInt32At(HostOffset(4, 1)); } }
        public int PciDevice { get { return GetInt16At(HostOffset(8, 1)); } }
        public int PciFunction { get { return GetInt16At(HostOffset(10, 1)); } }
        public int PciVendorId { get { return GetInt16At(HostOffset(12, 1)); } }
        public int PciDeviceId { get { return GetInt16At(HostOffset(14, 1)); } }
        public Address DeviceHandle { get { return GetAddressAt(HostOffset(16, 1)); } }
        public int idVendor { get { return GetInt16At(HostOffset(20, 2)); } }
        public int idProduct { get { return GetInt16At(HostOffset(22, 2)); } }
        public int PortPathDepth { get { return GetInt32At(HostOffset(24, 2)); } }
        public int PortPath { get { return GetInt32At(HostOffset(28, 2)); } }
        public int DeviceSpeed { get { return GetInt32At(HostOffset(52, 2)); } }
        public int DeviceAddress { get { return GetInt32At(HostOffset(56, 2)); } }
        public int fid_bLength { get { return GetByteAt(HostOffset(60, 2)); } }
        public int fid_bDescriptorType { get { return GetByteAt(HostOffset(61, 2)); } }
        public int fid_bcdUSB { get { return GetInt16At(HostOffset(62, 2)); } }
        public int fid_bDeviceClass { get { return GetByteAt(HostOffset(64, 2)); } }
        public int fid_bDeviceSubClass { get { return GetByteAt(HostOffset(65, 2)); } }
        public int fid_bDeviceProtocol { get { return GetByteAt(HostOffset(66, 2)); } }
        public int fid_bMaxPacketSize0 { get { return GetByteAt(HostOffset(67, 2)); } }
        public int fid_idVendor { get { return GetInt16At(HostOffset(68, 2)); } }
        public int fid_idProduct { get { return GetInt16At(HostOffset(70, 2)); } }
        public int fid_bcdDevice { get { return GetInt16At(HostOffset(72, 2)); } }
        public int fid_iManufacturer { get { return GetByteAt(HostOffset(74, 2)); } }
        public int fid_iProduct { get { return GetByteAt(HostOffset(75, 2)); } }
        public int fid_iSerialNumber { get { return GetByteAt(HostOffset(76, 2)); } }
        public int fid_bNumConfigurations { get { return GetByteAt(HostOffset(77, 2)); } }
        public string fid_USBPORT_Device_Driver_Name { get { return GetUnicodeStringAt(HostOffset(78, 2)); } }
        public int fid_USBPORT_Device_Idle_State { get { return GetInt32At(SkipUnicodeString(HostOffset(78, 2))); } }
        public string fid_USBPORT_Device_Pdo_Name { get { return GetUnicodeStringAt(SkipUnicodeString(HostOffset(78, 2))+4); } }

        #region Private
        internal stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(HostOffset(78, 2))+4)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(HostOffset(78, 2))+4)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "DeviceObject", DeviceObject);
             XmlAttrib(sb, "PciBus", PciBus);
             XmlAttrib(sb, "PciDevice", PciDevice);
             XmlAttrib(sb, "PciFunction", PciFunction);
             XmlAttrib(sb, "PciVendorId", PciVendorId);
             XmlAttrib(sb, "PciDeviceId", PciDeviceId);
             XmlAttribHex(sb, "DeviceHandle", DeviceHandle);
             XmlAttrib(sb, "idVendor", idVendor);
             XmlAttrib(sb, "idProduct", idProduct);
             XmlAttrib(sb, "PortPathDepth", PortPathDepth);
             XmlAttrib(sb, "PortPath", PortPath);
             XmlAttrib(sb, "DeviceSpeed", DeviceSpeed);
             XmlAttrib(sb, "DeviceAddress", DeviceAddress);
             XmlAttrib(sb, "fid_bLength", fid_bLength);
             XmlAttrib(sb, "fid_bDescriptorType", fid_bDescriptorType);
             XmlAttrib(sb, "fid_bcdUSB", fid_bcdUSB);
             XmlAttrib(sb, "fid_bDeviceClass", fid_bDeviceClass);
             XmlAttrib(sb, "fid_bDeviceSubClass", fid_bDeviceSubClass);
             XmlAttrib(sb, "fid_bDeviceProtocol", fid_bDeviceProtocol);
             XmlAttrib(sb, "fid_bMaxPacketSize0", fid_bMaxPacketSize0);
             XmlAttrib(sb, "fid_idVendor", fid_idVendor);
             XmlAttrib(sb, "fid_idProduct", fid_idProduct);
             XmlAttrib(sb, "fid_bcdDevice", fid_bcdDevice);
             XmlAttrib(sb, "fid_iManufacturer", fid_iManufacturer);
             XmlAttrib(sb, "fid_iProduct", fid_iProduct);
             XmlAttrib(sb, "fid_iSerialNumber", fid_iSerialNumber);
             XmlAttrib(sb, "fid_bNumConfigurations", fid_bNumConfigurations);
             XmlAttrib(sb, "fid_USBPORT_Device_Driver_Name", fid_USBPORT_Device_Driver_Name);
             XmlAttrib(sb, "fid_USBPORT_Device_Idle_State", fid_USBPORT_Device_Idle_State);
             XmlAttrib(sb, "fid_USBPORT_Device_Pdo_Name", fid_USBPORT_Device_Pdo_Name);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DeviceObject", "PciBus", "PciDevice", "PciFunction", "PciVendorId", "PciDeviceId", "DeviceHandle", "idVendor", "idProduct", "PortPathDepth", "PortPath", "DeviceSpeed", "DeviceAddress", "fid_bLength", "fid_bDescriptorType", "fid_bcdUSB", "fid_bDeviceClass", "fid_bDeviceSubClass", "fid_bDeviceProtocol", "fid_bMaxPacketSize0", "fid_idVendor", "fid_idProduct", "fid_bcdDevice", "fid_iManufacturer", "fid_iProduct", "fid_iSerialNumber", "fid_bNumConfigurations", "fid_USBPORT_Device_Driver_Name", "fid_USBPORT_Device_Idle_State", "fid_USBPORT_Device_Pdo_Name"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DeviceObject;
                case 1:
                    return PciBus;
                case 2:
                    return PciDevice;
                case 3:
                    return PciFunction;
                case 4:
                    return PciVendorId;
                case 5:
                    return PciDeviceId;
                case 6:
                    return DeviceHandle;
                case 7:
                    return idVendor;
                case 8:
                    return idProduct;
                case 9:
                    return PortPathDepth;
                case 10:
                    return PortPath;
                case 11:
                    return DeviceSpeed;
                case 12:
                    return DeviceAddress;
                case 13:
                    return fid_bLength;
                case 14:
                    return fid_bDescriptorType;
                case 15:
                    return fid_bcdUSB;
                case 16:
                    return fid_bDeviceClass;
                case 17:
                    return fid_bDeviceSubClass;
                case 18:
                    return fid_bDeviceProtocol;
                case 19:
                    return fid_bMaxPacketSize0;
                case 20:
                    return fid_idVendor;
                case 21:
                    return fid_idProduct;
                case 22:
                    return fid_bcdDevice;
                case 23:
                    return fid_iManufacturer;
                case 24:
                    return fid_iProduct;
                case 25:
                    return fid_iSerialNumber;
                case 26:
                    return fid_bNumConfigurations;
                case 27:
                    return fid_USBPORT_Device_Driver_Name;
                case 28:
                    return fid_USBPORT_Device_Idle_State;
                case 29:
                    return fid_USBPORT_Device_Pdo_Name;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INFORMATIONmessageArgs> m_target;
        #endregion
    }
    public sealed class stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageArgs : TraceEvent
    {
        public Address DeviceObject { get { return GetAddressAt(0); } }
        public int PciBus { get { return GetInt32At(HostOffset(4, 1)); } }
        public int PciDevice { get { return GetInt16At(HostOffset(8, 1)); } }
        public int PciFunction { get { return GetInt16At(HostOffset(10, 1)); } }
        public int PciVendorId { get { return GetInt16At(HostOffset(12, 1)); } }
        public int PciDeviceId { get { return GetInt16At(HostOffset(14, 1)); } }
        public Address DeviceHandle { get { return GetAddressAt(HostOffset(16, 1)); } }
        public int idVendor { get { return GetInt16At(HostOffset(20, 2)); } }
        public int idProduct { get { return GetInt16At(HostOffset(22, 2)); } }
        public int PortPathDepth { get { return GetInt32At(HostOffset(24, 2)); } }
        public int PortPath { get { return GetInt32At(HostOffset(28, 2)); } }
        public int DeviceSpeed { get { return GetInt32At(HostOffset(52, 2)); } }
        public int DeviceAddress { get { return GetInt32At(HostOffset(56, 2)); } }
        public int fid_bLength { get { return GetByteAt(HostOffset(60, 2)); } }
        public int fid_bDescriptorType { get { return GetByteAt(HostOffset(61, 2)); } }
        public int fid_bcdUSB { get { return GetInt16At(HostOffset(62, 2)); } }
        public int fid_bDeviceClass { get { return GetByteAt(HostOffset(64, 2)); } }
        public int fid_bDeviceSubClass { get { return GetByteAt(HostOffset(65, 2)); } }
        public int fid_bDeviceProtocol { get { return GetByteAt(HostOffset(66, 2)); } }
        public int fid_bMaxPacketSize0 { get { return GetByteAt(HostOffset(67, 2)); } }
        public int fid_idVendor { get { return GetInt16At(HostOffset(68, 2)); } }
        public int fid_idProduct { get { return GetInt16At(HostOffset(70, 2)); } }
        public int fid_bcdDevice { get { return GetInt16At(HostOffset(72, 2)); } }
        public int fid_iManufacturer { get { return GetByteAt(HostOffset(74, 2)); } }
        public int fid_iProduct { get { return GetByteAt(HostOffset(75, 2)); } }
        public int fid_iSerialNumber { get { return GetByteAt(HostOffset(76, 2)); } }
        public int fid_bNumConfigurations { get { return GetByteAt(HostOffset(77, 2)); } }

        #region Private
        internal stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageArgs(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(78, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(78, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "DeviceObject", DeviceObject);
             XmlAttrib(sb, "PciBus", PciBus);
             XmlAttrib(sb, "PciDevice", PciDevice);
             XmlAttrib(sb, "PciFunction", PciFunction);
             XmlAttrib(sb, "PciVendorId", PciVendorId);
             XmlAttrib(sb, "PciDeviceId", PciDeviceId);
             XmlAttribHex(sb, "DeviceHandle", DeviceHandle);
             XmlAttrib(sb, "idVendor", idVendor);
             XmlAttrib(sb, "idProduct", idProduct);
             XmlAttrib(sb, "PortPathDepth", PortPathDepth);
             XmlAttrib(sb, "PortPath", PortPath);
             XmlAttrib(sb, "DeviceSpeed", DeviceSpeed);
             XmlAttrib(sb, "DeviceAddress", DeviceAddress);
             XmlAttrib(sb, "fid_bLength", fid_bLength);
             XmlAttrib(sb, "fid_bDescriptorType", fid_bDescriptorType);
             XmlAttrib(sb, "fid_bcdUSB", fid_bcdUSB);
             XmlAttrib(sb, "fid_bDeviceClass", fid_bDeviceClass);
             XmlAttrib(sb, "fid_bDeviceSubClass", fid_bDeviceSubClass);
             XmlAttrib(sb, "fid_bDeviceProtocol", fid_bDeviceProtocol);
             XmlAttrib(sb, "fid_bMaxPacketSize0", fid_bMaxPacketSize0);
             XmlAttrib(sb, "fid_idVendor", fid_idVendor);
             XmlAttrib(sb, "fid_idProduct", fid_idProduct);
             XmlAttrib(sb, "fid_bcdDevice", fid_bcdDevice);
             XmlAttrib(sb, "fid_iManufacturer", fid_iManufacturer);
             XmlAttrib(sb, "fid_iProduct", fid_iProduct);
             XmlAttrib(sb, "fid_iSerialNumber", fid_iSerialNumber);
             XmlAttrib(sb, "fid_bNumConfigurations", fid_bNumConfigurations);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DeviceObject", "PciBus", "PciDevice", "PciFunction", "PciVendorId", "PciDeviceId", "DeviceHandle", "idVendor", "idProduct", "PortPathDepth", "PortPath", "DeviceSpeed", "DeviceAddress", "fid_bLength", "fid_bDescriptorType", "fid_bcdUSB", "fid_bDeviceClass", "fid_bDeviceSubClass", "fid_bDeviceProtocol", "fid_bMaxPacketSize0", "fid_idVendor", "fid_idProduct", "fid_bcdDevice", "fid_iManufacturer", "fid_iProduct", "fid_iSerialNumber", "fid_bNumConfigurations"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DeviceObject;
                case 1:
                    return PciBus;
                case 2:
                    return PciDevice;
                case 3:
                    return PciFunction;
                case 4:
                    return PciVendorId;
                case 5:
                    return PciDeviceId;
                case 6:
                    return DeviceHandle;
                case 7:
                    return idVendor;
                case 8:
                    return idProduct;
                case 9:
                    return PortPathDepth;
                case 10:
                    return PortPath;
                case 11:
                    return DeviceSpeed;
                case 12:
                    return DeviceAddress;
                case 13:
                    return fid_bLength;
                case 14:
                    return fid_bDescriptorType;
                case 15:
                    return fid_bcdUSB;
                case 16:
                    return fid_bDeviceClass;
                case 17:
                    return fid_bDeviceSubClass;
                case 18:
                    return fid_bDeviceProtocol;
                case 19:
                    return fid_bMaxPacketSize0;
                case 20:
                    return fid_idVendor;
                case 21:
                    return fid_idProduct;
                case 22:
                    return fid_bcdDevice;
                case 23:
                    return fid_iManufacturer;
                case 24:
                    return fid_iProduct;
                case 25:
                    return fid_iSerialNumber;
                case 26:
                    return fid_bNumConfigurations;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_INITIALIZEmessageArgs> m_target;
        #endregion
    }
    public sealed class stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs : TraceEvent
    {
        public Address DeviceObject { get { return GetAddressAt(0); } }
        public int PciBus { get { return GetInt32At(HostOffset(4, 1)); } }
        public int PciDevice { get { return GetInt16At(HostOffset(8, 1)); } }
        public int PciFunction { get { return GetInt16At(HostOffset(10, 1)); } }
        public int PciVendorId { get { return GetInt16At(HostOffset(12, 1)); } }
        public int PciDeviceId { get { return GetInt16At(HostOffset(14, 1)); } }
        public Address DeviceHandle { get { return GetAddressAt(HostOffset(16, 1)); } }
        public int idVendor { get { return GetInt16At(HostOffset(20, 2)); } }
        public int idProduct { get { return GetInt16At(HostOffset(22, 2)); } }
        public int PortPathDepth { get { return GetInt32At(HostOffset(24, 2)); } }
        public int PortPath { get { return GetInt32At(HostOffset(28, 2)); } }
        public int DeviceSpeed { get { return GetInt32At(HostOffset(52, 2)); } }
        public int DeviceAddress { get { return GetInt32At(HostOffset(56, 2)); } }

        #region Private
        internal stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(60, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(60, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "DeviceObject", DeviceObject);
             XmlAttrib(sb, "PciBus", PciBus);
             XmlAttrib(sb, "PciDevice", PciDevice);
             XmlAttrib(sb, "PciFunction", PciFunction);
             XmlAttrib(sb, "PciVendorId", PciVendorId);
             XmlAttrib(sb, "PciDeviceId", PciDeviceId);
             XmlAttribHex(sb, "DeviceHandle", DeviceHandle);
             XmlAttrib(sb, "idVendor", idVendor);
             XmlAttrib(sb, "idProduct", idProduct);
             XmlAttrib(sb, "PortPathDepth", PortPathDepth);
             XmlAttrib(sb, "PortPath", PortPath);
             XmlAttrib(sb, "DeviceSpeed", DeviceSpeed);
             XmlAttrib(sb, "DeviceAddress", DeviceAddress);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DeviceObject", "PciBus", "PciDevice", "PciFunction", "PciVendorId", "PciDeviceId", "DeviceHandle", "idVendor", "idProduct", "PortPathDepth", "PortPath", "DeviceSpeed", "DeviceAddress"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DeviceObject;
                case 1:
                    return PciBus;
                case 2:
                    return PciDevice;
                case 3:
                    return PciFunction;
                case 4:
                    return PciVendorId;
                case 5:
                    return PciDeviceId;
                case 6:
                    return DeviceHandle;
                case 7:
                    return idVendor;
                case 8:
                    return idProduct;
                case 9:
                    return PortPathDepth;
                case 10:
                    return PortPath;
                case 11:
                    return DeviceSpeed;
                case 12:
                    return DeviceAddress;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICEmessagestringUSBPORT_ETW_PROVIDERopcodeop_REMOVALmessageArgs> m_target;
        #endregion
    }
    public sealed class stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageArgs : TraceEvent
    {
        public Address DeviceObject { get { return GetAddressAt(0); } }
        public int PciBus { get { return GetInt32At(HostOffset(4, 1)); } }
        public int PciDevice { get { return GetInt16At(HostOffset(8, 1)); } }
        public int PciFunction { get { return GetInt16At(HostOffset(10, 1)); } }
        public int PciVendorId { get { return GetInt16At(HostOffset(12, 1)); } }
        public int PciDeviceId { get { return GetInt16At(HostOffset(14, 1)); } }
        public Address DeviceHandle { get { return GetAddressAt(HostOffset(16, 1)); } }
        public int idVendor { get { return GetInt16At(HostOffset(20, 2)); } }
        public int idProduct { get { return GetInt16At(HostOffset(22, 2)); } }
        public int PortPathDepth { get { return GetInt32At(HostOffset(24, 2)); } }
        public int PortPath { get { return GetInt32At(HostOffset(28, 2)); } }
        public int DeviceSpeed { get { return GetInt32At(HostOffset(52, 2)); } }
        public int DeviceAddress { get { return GetInt32At(HostOffset(56, 2)); } }
        public int fid_USBPORT_Device_Idle_Previous_State { get { return GetInt32At(HostOffset(60, 2)); } }
        public int fid_USBPORT_Device_Idle_New_State { get { return GetInt32At(HostOffset(64, 2)); } }

        #region Private
        internal stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageArgs(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(68, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(68, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "DeviceObject", DeviceObject);
             XmlAttrib(sb, "PciBus", PciBus);
             XmlAttrib(sb, "PciDevice", PciDevice);
             XmlAttrib(sb, "PciFunction", PciFunction);
             XmlAttrib(sb, "PciVendorId", PciVendorId);
             XmlAttrib(sb, "PciDeviceId", PciDeviceId);
             XmlAttribHex(sb, "DeviceHandle", DeviceHandle);
             XmlAttrib(sb, "idVendor", idVendor);
             XmlAttrib(sb, "idProduct", idProduct);
             XmlAttrib(sb, "PortPathDepth", PortPathDepth);
             XmlAttrib(sb, "PortPath", PortPath);
             XmlAttrib(sb, "DeviceSpeed", DeviceSpeed);
             XmlAttrib(sb, "DeviceAddress", DeviceAddress);
             XmlAttrib(sb, "fid_USBPORT_Device_Idle_Previous_State", fid_USBPORT_Device_Idle_Previous_State);
             XmlAttrib(sb, "fid_USBPORT_Device_Idle_New_State", fid_USBPORT_Device_Idle_New_State);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DeviceObject", "PciBus", "PciDevice", "PciFunction", "PciVendorId", "PciDeviceId", "DeviceHandle", "idVendor", "idProduct", "PortPathDepth", "PortPath", "DeviceSpeed", "DeviceAddress", "fid_USBPORT_Device_Idle_Previous_State", "fid_USBPORT_Device_Idle_New_State"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DeviceObject;
                case 1:
                    return PciBus;
                case 2:
                    return PciDevice;
                case 3:
                    return PciFunction;
                case 4:
                    return PciVendorId;
                case 5:
                    return PciDeviceId;
                case 6:
                    return DeviceHandle;
                case 7:
                    return idVendor;
                case 8:
                    return idProduct;
                case 9:
                    return PortPathDepth;
                case 10:
                    return PortPath;
                case 11:
                    return DeviceSpeed;
                case 12:
                    return DeviceAddress;
                case 13:
                    return fid_USBPORT_Device_Idle_Previous_State;
                case 14:
                    return fid_USBPORT_Device_Idle_New_State;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLEARmessageArgs> m_target;
        #endregion
    }
    public sealed class stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageArgs : TraceEvent
    {
        public Address DeviceObject { get { return GetAddressAt(0); } }
        public int PciBus { get { return GetInt32At(HostOffset(4, 1)); } }
        public int PciDevice { get { return GetInt16At(HostOffset(8, 1)); } }
        public int PciFunction { get { return GetInt16At(HostOffset(10, 1)); } }
        public int PciVendorId { get { return GetInt16At(HostOffset(12, 1)); } }
        public int PciDeviceId { get { return GetInt16At(HostOffset(14, 1)); } }
        public Address DeviceHandle { get { return GetAddressAt(HostOffset(16, 1)); } }
        public int idVendor { get { return GetInt16At(HostOffset(20, 2)); } }
        public int idProduct { get { return GetInt16At(HostOffset(22, 2)); } }
        public int PortPathDepth { get { return GetInt32At(HostOffset(24, 2)); } }
        public int PortPath { get { return GetInt32At(HostOffset(28, 2)); } }
        public int DeviceSpeed { get { return GetInt32At(HostOffset(52, 2)); } }
        public int DeviceAddress { get { return GetInt32At(HostOffset(56, 2)); } }
        public int fid_USBPORT_Device_Idle_Previous_State { get { return GetInt32At(HostOffset(60, 2)); } }
        public int fid_USBPORT_Device_Idle_New_State { get { return GetInt32At(HostOffset(64, 2)); } }

        #region Private
        internal stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageArgs(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(68, 2)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(68, 2)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "DeviceObject", DeviceObject);
             XmlAttrib(sb, "PciBus", PciBus);
             XmlAttrib(sb, "PciDevice", PciDevice);
             XmlAttrib(sb, "PciFunction", PciFunction);
             XmlAttrib(sb, "PciVendorId", PciVendorId);
             XmlAttrib(sb, "PciDeviceId", PciDeviceId);
             XmlAttribHex(sb, "DeviceHandle", DeviceHandle);
             XmlAttrib(sb, "idVendor", idVendor);
             XmlAttrib(sb, "idProduct", idProduct);
             XmlAttrib(sb, "PortPathDepth", PortPathDepth);
             XmlAttrib(sb, "PortPath", PortPath);
             XmlAttrib(sb, "DeviceSpeed", DeviceSpeed);
             XmlAttrib(sb, "DeviceAddress", DeviceAddress);
             XmlAttrib(sb, "fid_USBPORT_Device_Idle_Previous_State", fid_USBPORT_Device_Idle_Previous_State);
             XmlAttrib(sb, "fid_USBPORT_Device_Idle_New_State", fid_USBPORT_Device_Idle_New_State);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DeviceObject", "PciBus", "PciDevice", "PciFunction", "PciVendorId", "PciDeviceId", "DeviceHandle", "idVendor", "idProduct", "PortPathDepth", "PortPath", "DeviceSpeed", "DeviceAddress", "fid_USBPORT_Device_Idle_Previous_State", "fid_USBPORT_Device_Idle_New_State"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DeviceObject;
                case 1:
                    return PciBus;
                case 2:
                    return PciDevice;
                case 3:
                    return PciFunction;
                case 4:
                    return PciVendorId;
                case 5:
                    return PciDeviceId;
                case 6:
                    return DeviceHandle;
                case 7:
                    return idVendor;
                case 8:
                    return idProduct;
                case 9:
                    return PortPathDepth;
                case 10:
                    return PortPath;
                case 11:
                    return DeviceSpeed;
                case 12:
                    return DeviceAddress;
                case 13:
                    return fid_USBPORT_Device_Idle_Previous_State;
                case 14:
                    return fid_USBPORT_Device_Idle_New_State;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_DEVICE_IDLE_STATEmessagestringUSBPORT_ETW_PROVIDERopcodeop_SETmessageArgs> m_target;
        #endregion
    }
    public sealed class stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessageArgs : TraceEvent
    {
        public Address DeviceObject { get { return GetAddressAt(0); } }
        public int PciBus { get { return GetInt32At(HostOffset(4, 1)); } }
        public int PciDevice { get { return GetInt16At(HostOffset(8, 1)); } }
        public int PciFunction { get { return GetInt16At(HostOffset(10, 1)); } }
        public int PciVendorId { get { return GetInt16At(HostOffset(12, 1)); } }
        public int PciDeviceId { get { return GetInt16At(HostOffset(14, 1)); } }
        public Address DeviceHandle { get { if (Version >= 0) return GetAddressAt(HostOffset(68, 4)); return GetAddressAt(HostOffset(16, 1)); } }
        public int idVendor { get { return GetInt16At(HostOffset(20, 2)); } }
        public int idProduct { get { return GetInt16At(HostOffset(22, 2)); } }
        public int PortPathDepth { get { return GetInt32At(HostOffset(24, 2)); } }
        public int PortPath { get { return GetInt32At(HostOffset(28, 2)); } }
        public int DeviceSpeed { get { return GetInt32At(HostOffset(52, 2)); } }
        public int DeviceAddress { get { return GetInt32At(HostOffset(56, 2)); } }
        public Address Endpoint { get { return GetAddressAt(HostOffset(60, 2)); } }
        public Address PipeHandle { get { return GetAddressAt(HostOffset(64, 3)); } }
        public int fid_bLength { get { return GetByteAt(HostOffset(72, 5)); } }
        public int fid_bDescriptorType { get { return GetByteAt(HostOffset(73, 5)); } }
        public int fid_bEndpointAddress { get { return GetByteAt(HostOffset(74, 5)); } }
        public int fid_bmAttributes { get { return GetByteAt(HostOffset(75, 5)); } }
        public int fid_wMaxPacketSize { get { return GetInt16At(HostOffset(76, 5)); } }
        public int fid_bInterval { get { return GetByteAt(HostOffset(78, 5)); } }

        #region Private
        internal stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessageArgs(Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessageArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != HostOffset(79, 5)));
            Debug.Assert(!(Version > 0 && EventDataLength < HostOffset(79, 5)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<stringUSBPORT_ETW_PROVIDERtasktask_USBPORT_ENDPOINTmessagestringUSBPORT_ETW_PROVIDERopcodeop_CLOSEmessageArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttribHex(sb, "DeviceObject", DeviceObject);
             XmlAttrib(sb, "PciBus", PciBus);
             XmlAttrib(sb, "PciDevice", PciDevice);
             XmlAttrib(sb, "PciFunction", PciFunction);
             XmlAttrib(sb, "PciVendorId", PciVendorId);
             XmlAttrib(sb, "PciDeviceId", PciDeviceId);
             XmlAttribHex(sb, "DeviceHandle", DeviceHandle);
             XmlAttrib(sb, "idVendor", idVendor);
             XmlAttrib(sb, "idProduct", idProduct);
             XmlAttrib(sb, "PortPathDepth", PortPathDepth);
             XmlAttrib(sb, "PortPath", PortPath);
             XmlAttrib(sb, "DeviceSpeed", DeviceSpeed);
             XmlAttrib(sb, "DeviceAddress", DeviceAddress);
             XmlAttribHex(sb, "Endpoint", Endpoint);
             XmlAttribHex(sb, "PipeHandle", PipeHandle);
             XmlAttrib(sb, "fid_bLength", fid_bLength);
             XmlAttrib(sb, "fid_bDescriptorType", fid_bDescriptorType);
             XmlAttrib(sb, "fid_bEndpointAddress", fid_bEndpointAddress);
             XmlAttrib(sb, "fid_bmAttributes", fid_bmAttributes);
             XmlAttrib(sb, "fid_wMaxPacketSize", fid_wMaxPacketSize);
             XmlAttrib(sb, "fid_bInterval", fid_bInterval);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "DeviceObject", "PciBus", "PciDevice", "PciFunction", "PciVendorId", "PciDeviceId", "DeviceHandle", "idVendor", "idProduct", "PortPathDepth", "PortPath", "DeviceSpeed", "DeviceAddress", "Endpoint", "PipeHandle", "fid_bLength", "fid_bDescriptorType", "fid_bEndpointAddress", "fid_bmAttributes", "fid_wMaxPacketSize", "fid_bInterval"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return DeviceObject;
                case 1:
                    return PciBus;
                case 2:
                    return PciDevice;
                case 3:
                    return PciFunction;
                case 4:
                    return PciVendorId;
                case 5:
                    return PciDeviceId;
                case 6:
                    return DeviceHandle;
                case 7:
                    return idVendor;
                case 8:
                    return idProduct;
                case 9:
                    return PortPathDepth;
                case 10:
                    return PortPath;
                case 11:
                    return DeviceSpeed;
                case 12:
                    return DeviceAddress;
                case 13:
                    return Endpoint;
                case 14:
                    return PipeHandle;
                case 15:
                    return fid_bLength;
                case 16:
                    return fid_bDescriptorType;
                case 17:
                    return fid_bEndpointAddress;
                case 18:
                    return fid_bmAttributes;
                case 19:
                    return fid_wMaxPacketSize;
                case 20:
                    return fid_bInterval;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        